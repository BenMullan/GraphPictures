Imports GraphPictures.Library.CompilerExtentions

Namespace Library

	Public Module OscilloscopeResources

#Region "General Consts"
		REM All other Paths for Oscilloscope Resources are relative to this one:
		Public Const OscilloscopeData_FolderPath$ = "D:\Benedict\Documents\SchoolWork\Projects\GraphPictures\Solution\FromBravoSession0\OscilloscopeData\"

		'POTRACE is used to generate an SVG from a Raster Graphic
		Public Const OscilloscopeData_PotraceEXEPath$ = OscilloscopeData_FolderPath & "Potrace.EXE"
#End Region

#Region "Processing and PDE Consts"
		Public Const ProcessingJavaEXE_FilePath$ = OscilloscopeData_FolderPath & "Processing\processing-java.exe"
		Public Const SinglePDEs_OutputFolder_Path$ = OscilloscopeData_FolderPath & "ProcessingSketchbookFolder\GraphPicturesOutput\" 'I.E. PDE's not in a video, just single ones on their own from the processing of a single input image

		Public Const PDEFileContentsStart$ = _
		 "/* Generated by GraphPictures (Ben Mullan and Thomas Brockett 2021) */" & vbCrLf & _
		"import xyscope.*;XYscope xy;import ddf.minim.*;" & vbCrLf & _
		"void setup(){size(512,512);xy=new XYscope(this);}" & vbCrLf & _
		"void draw(){background(0);xy.clearWaves();xy.ellipseDetail(30);xy.beginShape();" & vbCrLf

		Public Const PDEFileContentsEnd$ = vbCrLf & vbCrLf & "xy.endShape();xy.buildWaves();xy.drawAll();}"

		Public Const NullPDEFileContents$ = _
		 "/* Generated by GraphPictures (Ben Mullan and Thomas Brockett 2021) */" & vbCrLf & _
		 "/* This is a Null PDE File. It will draw nothing. It was probably created because there were no SVG Contents for a Frame in an OscilliVideo */" & vbCrLf & _
		"import xyscope.*;XYscope xy;import ddf.minim.*;" & vbCrLf & _
		"void setup(){size(512,512);xy=new XYscope(this);}" & vbCrLf & _
		"void draw(){background(0);xy.clearWaves();xy.ellipseDetail(30);xy.buildWaves();xy.drawAll();}"
#End Region

#Region "Video-Rendering Consts"
		Public Const OscilloscopeVideos_FrameRate% = 10I
		Public Const OscilloscopeVideos_FFMPEGPath$ = OscilloscopeData_FolderPath & "Videos\FFMPEG.EXE"
		Public Const OscilloscopeVideos_FolderPath$ = OscilloscopeData_FolderPath & "Videos\"
#End Region

		''' <summary>
		''' Only produces xy.vector() instructions, to make a shape.
		''' </summary>
		Public Function GetPDEFileContentsFromBeziers(ByVal _Beziers As IDesmosExpression()) As String

			REM It could be the case, that a Frame is actually empty, having not _Beziers in it's array.
			REM If this the case, then return a safe, empty, does-nothing PDEFile
			If _Beziers.Length = 0 Then Return NullPDEFileContents

			Const _OutputScale# = 0.08#

			Dim _PDEInstructions$ = String.Empty

			For Each _Bezier As IDesmosExpression In _Beziers
				Select Case _Bezier.GetType()
					Case GetType(QuadraticBezier)

						REM Draw one Line, from the StartPoint to the EndPoint of the _Bezier

						Dim _QuadraticBezier As QuadraticBezier = CType(_Bezier, QuadraticBezier)

						_PDEInstructions &= vbCrLf & String.Format("xy.vertex({0}, {1});",
						(_QuadraticBezier.StartPoint.X * _OutputScale).ToString(),
						(_QuadraticBezier.StartPoint.Y * _OutputScale).ToString()
						)

						'_PDEInstructions &= vbCrLf & String.Format("xy.vertex({0}, {1});",
						'_QuadraticBezier.ControlPoint.X.ToString(),
						' _QuadraticBezier.ControlPoint.Y.ToString()
						')

						_PDEInstructions &= vbCrLf & String.Format("xy.vertex({0}, {1});",
						(_QuadraticBezier.EndPoint.X * _OutputScale).ToString(),
						(_QuadraticBezier.EndPoint.Y * _OutputScale).ToString()
						)

					Case GetType(CubicBezier)

						REM Draw Three Lines out of the _Bezier

						Dim _CubicBezier As CubicBezier = CType(_Bezier, CubicBezier)

						'((1-t)^{3}(2014)+3t(1-t)^{2}(1079)+3t^{2}(1-t)(247)+t^{3}(163),(1-t)^{3}(5575)+3t(1-t)^{2}(5584)+3t^{2}(1-t)(5590)+t^{3}(5588))

						Dim _PointResolver As Func(Of Double, Boolean, Double) = _
						  Function(T#, _ResolveForX As Boolean)
							  Return CDbl(If(_ResolveForX,
							  (((1 - T) ^ 3) * (_CubicBezier.StartPoint.X)) + (3 * T * ((1 - T) ^ 2) * (_CubicBezier.ControlPointOne.X)) + (3 * (T ^ 2) * (1 - T) * (_CubicBezier.ControlPointTwo.X)) + ((T ^ 3) * (_CubicBezier.EndPoint.X)),
							  (((1 - T) ^ 3) * (_CubicBezier.StartPoint.Y)) + (3 * T * ((1 - T) ^ 2) * (_CubicBezier.ControlPointOne.Y)) + (3 * (T ^ 2) * (1 - T) * (_CubicBezier.ControlPointTwo.Y)) + ((T ^ 3) * (_CubicBezier.EndPoint.Y))
							  ))
						  End Function

						Dim _P0X# = _PointResolver.Invoke(0.0R, True) * _OutputScale#
						Dim _P0Y# = _PointResolver.Invoke(0.0R, False) * _OutputScale#

						Dim _P1X# = _PointResolver.Invoke(0.33R, True) * _OutputScale#
						Dim _P1Y# = _PointResolver.Invoke(0.33R, False) * _OutputScale#

						Dim _P2X# = _PointResolver.Invoke(0.66R, True) * _OutputScale#
						Dim _P2Y# = _PointResolver.Invoke(0.66R, False) * _OutputScale#

						Dim _P3X# = _PointResolver.Invoke(1.0R, True) * _OutputScale#
						Dim _P3Y# = _PointResolver.Invoke(1.0R, False) * _OutputScale#

						_PDEInstructions &= vbCrLf & String.Format("xy.vertex({0}, {1});",
						_P0X.ToString(), _P0Y.ToString()
						)

						_PDEInstructions &= vbCrLf & String.Format("xy.vertex({0}, {1});",
						  _P1X.ToString(), _P1Y.ToString()
						  )

						_PDEInstructions &= vbCrLf & String.Format("xy.vertex({0}, {1});",
						 _P2X.ToString(), _P2Y.ToString()
						 )

						REM We won't plot _P3, in the hope that the _P0 of the next Cubic Bezier, will be the same as the EndPoint of this Bezier

					Case Else
						Throw New Exception("The Type of an IDesmosExpression in the GetPDEInstructionsFromBeziers() Method was not dealt with.")
				End Select
			Next

			Return PDEFileContentsStart & _PDEInstructions & PDEFileContentsEnd

		End Function

		''' <summary>
		''' Saves the PDE to Disk (Generated from the SVG), in the OscilloscopeResources.SinglePDEs_OutputFolder_Path, with a randomly-generated FileName.
		''' </summary>
		Public Sub GenerateAndRunPDEFileFromSVG(ByVal _SVGFilePath$)

			RunPDEFile(SinglePDEs_OutputFolder_Path & SavePDEToDisk(GetPDEFileContentsFromSVG(_SVGFilePath), SinglePDEs_OutputFolder_Path))

		End Sub

#Region "OscilliVideo Rendering"

		Private Const MuteVolumeCode As Integer = &H80000
		Private Const VolumeUpCode As Integer = &HA0000
		Private Const VolumeDownCode As Integer = &H90000
		Private Const ApplicationCommandCode As Integer = &H319

		<Runtime.InteropServices.DllImport("user32.dll")>
		Private Function SendMessageW(ByVal _WindowHandle As IntPtr, ByVal _Msg As Integer, ByVal _wParam As IntPtr, ByVal _lParam As IntPtr) As IntPtr
		End Function

		Public Sub ToggleSystemVolumeMuteStatus()
			SendMessageW((New Windows.Forms.Form()).Handle, ApplicationCommandCode, (New Windows.Forms.Form()).Handle, New IntPtr(MuteVolumeCode))
		End Sub

		Public ReadOnly OscilliResourcesSVGGenerationOptions As New GraphPictures.Library.ImagingResources.SVGGenerator.SVGGenerationOptions() With {
		 .BitmapConversionFolder = New IO.DirectoryInfo(OscilloscopeData_FolderPath),
		 .PotraceEXE = New IO.FileInfo(OscilloscopeData_PotraceEXEPath),
		 .SVGSizeModerationMode = Library.SVGGenerator.SVGSizeModerationAlgorythm.AdjustTSize,
		 .TargetOrMaximun_SVGFileSizeKB = 25US
		}

		''' <summary>
		''' Generates the .PDE Files for each frame of the Video. These can then be opened in Processing, to get the Audio for the Frame.
		''' </summary>
		Public Sub GenerateOscilloscopeVideoFramePDEsFor(ByVal _VideoName$)

			REM Input.MP4 is found in OscilloscopeData\Videos\
			REM Input.MP4_Frames Folder is generated
			REM FFMPEG Generates the Frames in the format [Input.MP4_Frames\Frame00001.BMP]
			REM In series, ApplyTransformationToSavedImage(), to flip the RasterGraphics

			REM Generate an SVG for each Frame, in the format [Input.MP4_Frames\SVGs\Frame00001.SVG]
			REM GetBeziersFromPotraceSVG() -> GetPDEVectorShapeInstructionsFromBeziers() -> SaveAndOpenPDEFile()

			REM Wait 8 Seconds, then Set the system volume to 40%, then wait 1 second, then Mute the system volume again.
			REM Taskkill all instances of Java and Processing-Java
			REM (...The System Audio Output is received by another Computer's LineIn, which then records the audio at a high bitrate in Audacity.)
			REM Use Audacity's "Truncate Silence" feature to remove the unneeded peices of audio, on the other Computer

			REM Location Convention:
			'OscilloscopeData\Videos\Input.MP4
			'OscilloscopeData\Videos\Input.MP4_Frames\
			'OscilloscopeData\Videos\Input.MP4_Frames\Frame00001.BMP
			'OscilloscopeData\Videos\Input.MP4_Frames\SVGs\Frame00001.SVG
			'OscilloscopeData\Videos\Input.MP4_Frames\PDEs\Frame00001\Frame00001.pde

			Try

				'Generate the Frames from the VideoFile (This function also generates the Folder for those frames)
				Dim _VideoFrameCount As UInt32 = GenerateFramesForOscilliVideo(_VideoName)

				'For Each .BMP File in that newly-created Directory
				For Each _File As IO.FileInfo In (New IO.DirectoryInfo(OscilloscopeVideos_FolderPath & _VideoName & "_Frames\")).GetFiles().Where(Function(_FrameFile As IO.FileInfo) _FrameFile.Name.MatchesRegEx(Resources.VideoFrame_FileName_RegExp))

					'Flip the BitMap upside-down
					Global.GraphPictures.Library.ImagingResources.ApplyTransformationToSavedImage(_File.FullName, Drawing.RotateFlipType.Rotate270FlipNone)

					'Now Generate an SVG for the frame. The Substring means [Frame00001.BMP] becomes [00001]
					GenerateSVGForOscilliVideoFrame(_VideoName, _File.Name.Substring(5, 5))

					'Now we need to Generate a .PDE File from that SVG.
					SavePDEToDisk(GetPDEFileContentsFromSVG(OscilloscopeVideos_FolderPath & _VideoName & "_Frames\SVGs\Frame" & _File.Name.Substring(5, 5) & ".SVG"), OscilloscopeVideos_FolderPath & _VideoName & "_Frames\PDEs\", "Frame" & _File.Name.Substring(5, 5))

				Next

				REM At the end of this Sub, we should now have a .PDE File for each Frame in the Input Video

			Catch _Ex As Exception When True
				Throw New Exception("The following exception occoured upon attempting to Generate an OscilliVideo: " & _Ex.Message, _Ex)
			End Try

		End Sub

		''' <summary>
		''' !
		''' !
		''' !
		''' MAKE SURE TO SET THE SYSTEM VOLUME TO MUTE, BEFORE RUNNING THIS METHOD!!!!!!!!!!!!!!!
		''' !
		''' !
		''' !
		''' Runs the PDEFile for Frame00001, then for Frame00002, etc...
		''' </summary>
		''' <param name="_VideoName"></param>
		''' <remarks></remarks>
		Public Sub SequentiallyRunVideoFramePDEFiles(ByVal _VideoName$)

			Try
				'Make sure that at least one frame is generated for the specified video
				If Not IO.File.Exists(OscilloscopeVideos_FolderPath & _VideoName & "_Frames\PDEs\Frame00001\Frame00001.pde") Then Throw New ArgumentException("The specified _VideoName didn't have at least one frame generated for it.")

				For Each _FramePDEFolder As IO.DirectoryInfo In (New IO.DirectoryInfo(OscilloscopeVideos_FolderPath & _VideoName & "_Frames\PDEs\")).GetDirectories("Frame*", IO.SearchOption.TopDirectoryOnly)

					'Just wait for Taskkill.exe to actually load and kill the last instance, before starting the next instance (of java.exe)
					'...Otherwise, the new instance will be taskkilled too, because it would be running at the same time as the taskkill
					Threading.Thread.Sleep(1000)

					RunPDEFile(OscilloscopeVideos_FolderPath & _VideoName & "_Frames\PDEs\" & _FramePDEFolder.Name)

					'Wait for that PDEFile to start playing audio
					Threading.Thread.Sleep(6500)

					'Assuming the System is currently muted, this will unmute the Speakers for 1 Second
					Library.OscilloscopeResources.ToggleSystemVolumeMuteStatus()

					'This then lets the RecorderComputer record this many ms of the PDE's Audio:
					Threading.Thread.Sleep(500)

					'...And this then mute's the system volume again:
					Library.OscilloscopeResources.ToggleSystemVolumeMuteStatus()

					'Now that the PDEFile has played for 1 second, stop it
					'(I.E. Just stop the processing-java process, because otherwise it would still be running when we open the next frame.)
					StopRunningAllPDEFiles()

				Next

			Catch _Ex As Exception When True
				Throw New Exception("The following Exception was thrown upon attempting to Sequentially Run PDEFiles of OscilliVideo Frames: " & _Ex.Message, _Ex)
			End Try

		End Sub

		''' <summary>
		''' Generates Frames from _VideoFileName$
		''' </summary>
		''' <param name="_VideoFileName"></param>
		''' <returns>The Number of Frames Generated</returns>
		''' <remarks></remarks>
		Public Function GenerateFramesForOscilliVideo(ByVal _VideoFileName$) As UInt32

			Try

				'Make sure that the Argument to this function exists en-diskette
				If Not System.IO.File.Exists(OscilloscopeVideos_FolderPath & _VideoFileName) Then Throw (New GraphPictures.Library.GraphPicturesConversionException("An attempt was made to Generate Frames from a VideoFile, however the File does not exist. The path was: " & (OscilloscopeVideos_FolderPath & _VideoFileName)))

				REM Create the Directory into which the Frames for this Video will be Rendered
				IO.Directory.CreateDirectory(OscilloscopeVideos_FolderPath & _VideoFileName & "_Frames\")

				REM Specify the CommandLine Arguments for FFMPEG
				Dim _FFMPEGCLAs$ = "-i """ & (OscilloscopeVideos_FolderPath & _VideoFileName) & """ -r " & OscilloscopeVideos_FrameRate.ToString() & " """ & OscilloscopeVideos_FolderPath & _VideoFileName & "_Frames\Frame%05d.BMP"""

				With (New Diagnostics.Process())
					.StartInfo = (New Diagnostics.ProcessStartInfo(OscilloscopeVideos_FFMPEGPath, _FFMPEGCLAs))
					.Start()
					Try
						.WaitForExit()
						If Not (.ExitCode = 0) Then Throw New [Library].GraphPicturesConversionException("The FFMPEG Process returned a non-zero ExitCode. The ExitCode was: " & .ExitCode.ToString() & ". The Command-Line Arguments were: " & _FFMPEGCLAs)
					Catch _Ex As Library.GraphPicturesConversionException When True
						Throw (New Library.GraphPicturesConversionException("The FFMPEG Process could not be waited upon to exit, or it returned an Error. The Exception Thrown was: " & _Ex.Message))
					End Try
				End With

				REM This last part of the function Works out how many Frames were generated...
				Dim _FrameFileNames As New List(Of String)()
				For Each _FrameFile As IO.FileInfo In (New IO.DirectoryInfo(OscilloscopeVideos_FolderPath & _VideoFileName & "_Frames\").GetFiles())
					_FrameFileNames.Add(_FrameFile.Name)
				Next

				_FrameFileNames.Sort()

				REM Windows NT will generate a Thumbnail Image DataBase if the Thumbnails are used in Explorer.EXE
				If _FrameFileNames.Last().ToUpper() = "THUMBS.DB" Then _FrameFileNames.RemoveAt(_FrameFileNames.Count - 1)

				'Make sure that the Last FileName we're left with, is actually a Frame:
				If Not _FrameFileNames.Item(_FrameFileNames.Count - 1).MatchesRegEx(Resources.VideoFrame_FileName_RegExp$) Then Throw (New Library.GraphPicturesConversionException("The Last FileName in the Video's Frames Directory did not match the Regular Expression for a Frame. The FileName was: " & _FrameFileNames.Item(_FrameFileNames.Count - 1)))

				REM E.g. Frame00152.BMP
				Return CUInt(_FrameFileNames.Item(_FrameFileNames.Count - 1).Substring(5, 5))

			Catch _Ex As System.Exception When True
				Throw (New Library.GraphPicturesConversionException("The following Exception was thrown upon attempting to Generate Frames from a Video: " & _Ex.Message, _Ex))
			End Try

		End Function

		''' <summary>
		''' Produces an SVG for the Frame, assuming that the Frame is in [OscilloscopeData\Videos\VideoName.MP4_Frames\Frame00001.BMP].
		''' The SVG is then saved to [OscilloscopeData\Videos\VideoName.MP4_Frames\SVGs\Frame00001.SVG].
		''' 
		''' Note that the _FrameNumber$ is a string because it needs to have the correct number of leading 0's
		''' </summary>
		Public Sub GenerateSVGForOscilliVideoFrame(ByVal _VideoName$, ByVal _FrameNumber$, Optional ByVal _TargetSVGFileSizeKB As UInt16 = 10)

			Try

				REM Check that the Output Dir for the SVG is generated already
				If Not IO.Directory.Exists(OscilloscopeVideos_FolderPath & _VideoName & "_Frames\SVGs\") Then IO.Directory.CreateDirectory(OscilloscopeResources.OscilloscopeVideos_FolderPath & _VideoName & "_Frames\SVGs\")

				With (New Library.ImagingResources.SVGGenerator(New IO.FileInfo(IO.Path.Combine(OscilloscopeVideos_FolderPath, _VideoName & "_Frames\Frame" & _FrameNumber & ".BMP")), OscilloscopeResources.OscilliResourcesSVGGenerationOptions))
					.SVGGenerationParameters.TargetOrMaximun_SVGFileSizeKB = _TargetSVGFileSizeKB
					.GenerateSVG(IO.Path.Combine(OscilloscopeVideos_FolderPath, _VideoName & "_Frames\SVGs\Frame" & _FrameNumber & ".SVG"))
				End With

				Return

			Catch _Ex As Exception When True
				Throw (New GraphPictures.Library.GraphPicturesConversionException("During OscilliVideoFrame to SVG: " & _Ex.Message, _Ex))
			End Try

		End Sub

		''' <summary>
		''' The SVG File's Beziers are approximated as 3 Lines Each, and the PDE File tells Processing\XYScope to Draw these lines as vertex's in a compound shape.
		''' </summary>
		''' <param name="_SVGFilePath"></param>
		''' <returns>The Contents of the PDEFile</returns>
		''' <remarks></remarks>
		Public Function GetPDEFileContentsFromSVG(ByVal _SVGFilePath$) As String

			Try
				If Not IO.File.Exists(_SVGFilePath) Then Throw New ArgumentException("The specified _SVGFilePath does not exist en-disk. That path was: " & _SVGFilePath)

				Return GetPDEFileContentsFromBeziers(GetBeziersFromPotraceSVG(_SVGFilePath))

			Catch _Ex As Exception When True
				Throw New GraphPicturesConversionException("The following Exception was Thrown whilst attempting to Get the PDEFileContents indicitive of an SVG: " & _Ex.Message, _Ex)
			End Try

		End Function

		''' <summary>
		''' The PDE File is saved to disk (in the strange manner that processing seems to require - that's why this function isn't just a File.WriteText() call...)
		''' </summary>
		''' <param name="_PDEName">If set to {AutoGenerate}, then a FileName will be automatically generated in the format ^GP_\w{10}\.PDE$</param>
		''' <returns>The Name of the PDE (Sketch) Generated (Same as the File without the Extention .pde)</returns>
		Public Function SavePDEToDisk(ByVal _PDEFileContents$, ByVal _PDEOutputFolderpath$, Optional ByVal _PDEName$ = "{AutoGenerate}") As [String]

			Try

				REM The PDE File needs to be inside a Folder, which has the name [The PDE File Name, without the .PDE Extention]

				'The FolderPath should end in a [\]
				If Not _PDEOutputFolderpath.EndsWith("\") Then Throw New ArgumentException("The specified _PDEOutputFolderPath did not end with a BackSlash (\). The Path was: " & _PDEOutputFolderpath)

				If _PDEName = "{AutoGenerate}" Then
					REM Find a Random and not already-taken PDEFileName
					Do : _PDEName = ("GP_" & Library.Resources.GetRandomString(10)).ToUpper()
					Loop While IO.Directory.Exists(_PDEOutputFolderpath & "GP_" & _PDEName)
				Else
					REM Use the name already specified
				End If

				REM Now you've gotten a usable PDE Name, write the PDE File itself to disk
				IO.Directory.CreateDirectory(_PDEOutputFolderpath$ & _PDEName$ & "\")
				My.Computer.FileSystem.WriteAllText(_PDEOutputFolderpath$ & _PDEName$ & "\" & _PDEName & ".pde", _PDEFileContents, append:=False)

				REM For an unknown reason, some corrupted and strange data is put at the start of the PDE File. (3 Bytes of it.)
				Global.GraphPictures.Library.FileResources.RemoveFirstNBytesFromStartOfFile(
				   _FilePath:=_PDEOutputFolderpath & _PDEName$ & "\" & _PDEName & ".pde",
				   _NumberOfBytesToRemove:=3
				)

				Return _PDEName

			Catch _Ex As Exception When True
				Throw (New GraphPicturesConversionException("The following Exception was thrown upon attempting to Save a PDEFile. The Exception was: " & _Ex.Message, _Ex))
			End Try

		End Function

		''' <summary>
		''' Starts playing the Audio for the PDEFile, using the Processing-Java.EXE
		''' </summary>
		''' <param name="_PDEFolderPath">NOTE: This is not the path to a .PDE File. Instead, it is the path to the Folder, which has the same name as the pde file, but without the extention</param>
		''' <remarks></remarks>
		Public Sub RunPDEFile(ByVal _PDEFolderPath$)

			If Not IO.Directory.Exists(_PDEFolderPath) Then Throw New ArgumentException("Whilst attempting run Run a PDEFile, it was discovered that the specified _PDEFolderPath doesn't exist en-disk. The path was: " & _PDEFolderPath, "_PDEFolderPath")

			Dim _ProcessingCLAs$ = String.Format("--sketch=""{0}"" --run", (_PDEFolderPath))

			With (New Diagnostics.Process())
				Try
					.StartInfo = (New Diagnostics.ProcessStartInfo(ProcessingJavaEXE_FilePath$, _ProcessingCLAs$))
					.Start()
				Catch _Ex As GraphPicturesConversionException When True
					Throw (New GraphPicturesConversionException("The following Exception was thrown upon attempting to start the Processing-JAVA Process: " & _Ex.Message))
				End Try
			End With

		End Sub

		Public Sub StopRunningAllPDEFiles()

			Try

				'For Each _ProcessName$ In {"processing-java", "java"} : Process.GetProcessesByName(_ProcessName)(0).Kill() : Next
				Process.Start("taskkill", "/f /im:java.exe")

			Catch _Ex As Exception When True
				Throw New Exception("The following Exception was Thrown upon attempting to StopRunningAllPDEFiles(): " & _Ex.Message, _Ex)
			End Try

		End Sub

#End Region

	End Module

End Namespace