Imports GraphPictures.Library.CompilerExtentions

Namespace Library

	Public Module ImagingResources

		Public NotInheritable Class SVGGenerator

			Public Enum SVGSizeModerationAlgorythm
				''' <summary>
				''' Chops off the outer walls of the input RasterGraphic to attempt to reduce the size of the SVG generated
				''' </summary>
				CropInputEdges
				''' <summary>
				''' Changes the "--turdsize=" Argument to Potrace, so that More, or less, detail, ends up in the SVG.
				''' </summary>
				AdjustTSize
				''' <summary>
				''' Alters the [RG for Potrace]'s Dimensions relative to those of the IRG, over a Maximun Number of attempts, in the hope that Potrace will then pick up on less, or more, detail from the RG.
				''' </summary>
				AdjustInputQuality
				''' <summary>
				''' Bypasses all attempts to Get the SVGFile to be a certian size.
				''' </summary>
				DontModerateSVGFileSize
			End Enum

			Public Class SVGGenerationOptions
				Public _
				 PotraceEXE As IO.FileInfo,
				 SVGSizeModerationMode As SVGSizeModerationAlgorythm = SVGSizeModerationAlgorythm.AdjustTSize,
				 BitmapConversionFolder As IO.DirectoryInfo,
				 TargetOrMaximun_SVGFileSizeKB As UInt16 = SVGGenerator.DefaultTargetOrMaximumSVGFileSizeKB
			End Class

			Public Class SVGGenerationResultData
				Public InputRasterGraphicCropCount As Byte = 0					'The No. Times the IRG had to be cropped, to generate an SVG of the desired size
				Public GeneratedSVGFileSizes As New List(Of UInt64)()			'A Record of the FileSizes of Generated SVG's which were too large or small.
				Public FilesToBeDeleted As New List(Of IO.FileInfo)()			'All the Temp Files which an SVGGeneration Algorythm *should* automatically delete at the end of a process.
				Public UsedTSizes As New List(Of UInt16)()						'If the AdjustTSize ModerationMode is used, then this is used to keep track of the TSizes used to produce the SVGs
				Public LastSVGGenerated As New IO.FileInfo("GP_NONEXIST")		'The full path to the last SVGFile Generated by the Object
				Public TerminalRG_DimensionsPercentageOfIRG As UInt16 = 100%	'The % of the origional Dimensions which the Terminal RG had. [100% == Same as IRG]; [200% == Double those of IRG]

				''' <summary>Returns some XML (as a string), indicitive of the current contents of the current SVGGenerationResultData Object</summary>
				Public Overrides Function ToString() As String
					Return (
					 <SVGGenerationResultData
						 InputRasterGraphicCropCount=<%= Me.InputRasterGraphicCropCount.ToString() %>
						 GeneratedSVGFileSizes=<%= "{"c & String.Join(", ", Me.GeneratedSVGFileSizes.Select(Of String)(Function(_Size As UInt64) _Size.ToString()).ToArray()) & "}"c %>
						 FilesToBeDeleted=<%= "{"c & String.Join(", ", Me.FilesToBeDeleted.Select(Of String)(Function(_File As IO.FileInfo) _File.FullName).ToArray()) & "}"c %>
						 UsedTSizes=<%= "{"c & String.Join(", ", Me.UsedTSizes.Select(Of String)(Function(_TSize As UInt16) _TSize.ToString()).ToArray()) & "}"c %>
						 LastSVGGenerated=<%= Me.LastSVGGenerated.FullName %>
						 TerminalRG_DimensionsChangePercentage=<%= Me.TerminalRG_DimensionsPercentageOfIRG.ToString() %>
					 />
					 ).ToString()
				End Function

			End Class

			Public Const DefaultTargetOrMaximumSVGFileSizeKB As UInt16 = 40US		'For AdjustTSize, this is the Target FileSize for the SVG. For CropInputEdges, it's the Ideal Maximun Size
			Public Const DefaultPotraceTSize As UInt16 = 4US						'The Default TSize used in the CLA's for POTRACE.EXE. This valud is dynamically-adjusted by the AdjustTSize ModerationMode
			Public Const PotraceEXE_AllowedLifetimeMS As UInt32 = 12000UI			'Wait for a Maximun of 12 Seconds before Killing the process if it's still running, and returning
			Public SVGGenerationParameters As SVGGenerationOptions					'This Instance's Settings used when Generating SVG's from IRG's
			Public SVGGenerationResults As New SVGGenerationResultData()			'This Instance's By-Product Data from Generating an SVG

			Private InputRasterGraphic_ As IO.FileInfo
			Public ReadOnly Property InputRasterGraphic As IO.FileInfo
				Get
					Return Me.InputRasterGraphic_
				End Get
			End Property

			''' <summary>Instanciates an SVGGenerator</summary>
			''' <param name="_InputRasterGraphic">A Pointer to the RasterGraphic for which an SVG is to be generated</param>
			''' <param name="_SVGGenerationOptions">Various Perameters required to how to Generate the SVG from the RasterGraphic. Some of these parameters are already predefined with default values, but some are not!</param>
			Public Sub New(ByVal _InputRasterGraphic As IO.FileInfo, ByVal _SVGGenerationOptions As SVGGenerationOptions)
				If Not _InputRasterGraphic.Exists Then Throw (New IO.FileNotFoundException("The _InputRasterGraphic does not exist (SVGGenerator Constructor). It was: " & _InputRasterGraphic.FullName, _InputRasterGraphic.FullName))

				Me.InputRasterGraphic_ = _InputRasterGraphic
				Me.SVGGenerationParameters = _SVGGenerationOptions

				If Not Me.SVGGenerationParameters.PotraceEXE.Exists Then Throw (New IO.FileNotFoundException("The SVGGenerationPerameters.PotraceEXE File does not exist (SVGGenerator Constructor). It was: " & Me.SVGGenerationParameters.PotraceEXE.FullName, Me.SVGGenerationParameters.PotraceEXE.FullName))
				If Not Me.SVGGenerationParameters.BitmapConversionFolder.Exists Then Throw (New IO.FileNotFoundException("The SVGGenerationPerameters.BitmapConversionFolder File does not exist (SVGGenerator Constructor). It was: " & Me.SVGGenerationParameters.BitmapConversionFolder.FullName, Me.SVGGenerationParameters.BitmapConversionFolder.FullName))

			End Sub

			''' <summary>
			''' Generates an SVG whose name is based off of the name of the Input RasterGraphic, and the number of times the input image had to be cropped
			''' </summary>
			Public Function GenerateSVGInFolder(ByVal _SVGOutputFolder As IO.DirectoryInfo) As SVGGenerationResultData

				'Possible Problem: Although very unlikely, two instances of this Function could be running at the same time, and generate the same "random" SVGOutputName
				Try

					FileResources.CheckFolderPathsExistAndAreValid(_SVGOutputFolder.FullName.MakeValidFolderPath())

					REM Find an Avaliable FileName in the Folder
					Dim _SVGFile_OutputPath$ = _SVGOutputFolder.FullName.MakeValidFolderPath() & FileResources.FindAvaliableFileNameInFolder(_SVGOutputFolder.FullName.MakeValidFolderPath(), _FileNameSeed:=Me.InputRasterGraphic.Name & ".SVG")
					MsgDebug("Found this avaliable FileName in the SVGOutput Folder: " & _SVGFile_OutputPath)

					REM Generate the SVG with that name
					Dim _SVGGenerationResults As SVGGenerationResultData = Me.GenerateSVG(_SVGFile_OutputPath)

					Dim _FileNameSeed$ 'Effected by the ModerationMode - we want some detail about the result of the Moderation in the FileName

					If Me.SVGGenerationParameters.SVGSizeModerationMode = SVGSizeModerationAlgorythm.CropInputEdges Then
						_FileNameSeed = ("Cropped" & _SVGGenerationResults.InputRasterGraphicCropCount.ToString() & "Times_") & (New IO.FileInfo(_SVGFile_OutputPath$)).Name
					ElseIf Me.SVGGenerationParameters.SVGSizeModerationMode = SVGSizeModerationAlgorythm.AdjustTSize Then
						_FileNameSeed = ("T" & _SVGGenerationResults.UsedTSizes.Last().ToString() & "_"c) & (New IO.FileInfo(_SVGFile_OutputPath$)).Name
					ElseIf Me.SVGGenerationParameters.SVGSizeModerationMode = SVGSizeModerationAlgorythm.AdjustInputQuality Then
						_FileNameSeed = ("ResizedBy" & _SVGGenerationResults.TerminalRG_DimensionsPercentageOfIRG.ToString() & "_"c) & (New IO.FileInfo(_SVGFile_OutputPath$)).Name
					Else
						_FileNameSeed = (New IO.FileInfo(_SVGFile_OutputPath$)).Name
					End If

					REM The SVGFile has now been saved under that name, but *if* the CropEdges ModerationMode was used, then we want to also have the number of Crops which took place, as part of the FileName
					Dim _SVGFile_OutputPath_WithCropCount$ = _SVGOutputFolder.FullName & FileResources.FindAvaliableFileNameInFolder(
					 _FolderPath:=_SVGOutputFolder.FullName.MakeValidFolderPath(),
					 _FileNameSeed:=_FileNameSeed
					)

					REM Now rename the SVGFile which was generated, to use the name with the _CropCount
					Global.Microsoft.VisualBasic.FileIO.FileSystem.RenameFile(_SVGFile_OutputPath, (New IO.FileInfo(_SVGFile_OutputPath_WithCropCount)).Name)

					REM Update the FileName of the SVG Generated, now that it has been renamed
					_SVGGenerationResults.LastSVGGenerated = New IO.FileInfo(_SVGFile_OutputPath_WithCropCount)

					REM Update the Instance's Results Object to reflect [the Name Change] as well
					Me.SVGGenerationResults = _SVGGenerationResults

					Return _SVGGenerationResults

				Catch _EmptySVGExcp As GeneratedEmptySVGException : Throw
				Catch _Ex As Exception When True
					Throw New GraphPicturesConversionException("An attempt was made to Generate an SVG in a Specified Folder (" & _SVGOutputFolder.FullName.MakeValidFolderPath() & "), however the following Exception was Thrown: " & _Ex.Message, _Ex)
				End Try

			End Function

			''' <summary>
			''' Generates an SVG for the InputRasterGraphic, overwriting the File at _FinalSVGFile_OutputPath if it already exists.
			''' </summary>
			Public Function GenerateSVG(ByVal _FinalSVGFile_OutputPath$) As SVGGenerationResultData
				Select Case Me.SVGGenerationParameters.SVGSizeModerationMode
					Case SVGSizeModerationAlgorythm.AdjustTSize
						Me.SVGGenerationResults = Me.GenerateSVG_AdjustTSize_(_FinalSVGFile_OutputPath, Me.SVGGenerationParameters.TargetOrMaximun_SVGFileSizeKB) 'Target
					Case SVGSizeModerationAlgorythm.CropInputEdges
						Me.SVGGenerationResults = Me.GenerateSVG_CropInputEdges_(_FinalSVGFile_OutputPath, Me.SVGGenerationParameters.TargetOrMaximun_SVGFileSizeKB) 'Maximun
					Case SVGSizeModerationAlgorythm.DontModerateSVGFileSize
						Me.SVGGenerationResults = Me.GenerateSVG_DontModerateSVGFileSize_(_FinalSVGFile_OutputPath)
					Case SVGSizeModerationAlgorythm.AdjustInputQuality
						Me.SVGGenerationResults = Me.GenerateSVG_AdjustInputQuality_(_FinalSVGFile_OutputPath, Me.SVGGenerationParameters.TargetOrMaximun_SVGFileSizeKB) 'Target
					Case Else : Throw New Exception("The SVGSizeModerationMode could not be resolved during an attempt to Generate an SVG. It was: " & Me.SVGGenerationParameters.SVGSizeModerationMode.ToString())
				End Select

				If Not Me.SVGGenerationResults.LastSVGGenerated.Exists Then Throw New GraphPicturesConversionException("After supposedly generating an SVG, the LastSVGGenerated did not exist. The ModerationMode was: " & Me.SVGGenerationParameters.SVGSizeModerationMode.ToString() & ". The FilePath was: " & Me.SVGGenerationResults.LastSVGGenerated.FullName)

				'Return the Results of the SVGGeneration we just performed:
				Return Me.SVGGenerationResults

			End Function

#Region "SVGGeneration Algorythms"

			''' <summary>
			''' Generates an SVG for the InputRasterGraphic, using the Hard-Coded TSize
			''' </summary>
			''' <returns></returns>
			Private Function GenerateSVG_DontModerateSVGFileSize_(ByVal _FinalSVGFile_OutputPath$, Optional ByVal _PotraceTSize As UInt16 = SVGGenerator.DefaultPotraceTSize) As SVGGenerationResultData

				REM Generate a BMP for the IRG if it wasn't one already
				REM Generate an SVG using the DefaultTSize
				REM Check that the SVG isn't empty, throwing a GeneratedEmptySVGException if it is

				Dim _RasterGraphicForPotrace As IO.FileInfo = Me.InputRasterGraphic	'This points to the current RasterGraphic being used. It changes if a BMP is created because the IRG wasn't one.
				Dim _BMPHadToBeGenerated As Boolean = False							'Used in the [Finally] Statment to know weather or not to attempt to delete the Tempoary BMP

				Try

					REM Make sure that we are dealing with a .BMP file
					If Not (Me.InputRasterGraphic.Extension.ToUpper() = ".BMP") Then	'Generate a BMP to use instead of the actual InputFile...

						MsgDebug("The IRG was not a .BMP; Generating a tempoary BMP for it...")

						'Set the Path of the ImageFile potrace will use, to this a newly-generated BMP
						_RasterGraphicForPotrace = SVGGenerator.GenerateBMPInFolder(Me.InputRasterGraphic, Me.SVGGenerationParameters.BitmapConversionFolder)

						'We want to delete this BMP File at the end:
						_BMPHadToBeGenerated = True

					Else
						'If we're here, then the InputRasterGraphic was already a .BMP; it's fine as it is.
					End If

					REM The _CurrentRasterGraphic_FilePath Now points to a .BMP File, ready for Potrace.

					Dim _PotraceCLAs$ = String.Format("--output ""{0}"" --svg --progress --turdsize {1} ""{2}""", _FinalSVGFile_OutputPath, _PotraceTSize, _RasterGraphicForPotrace.FullName)

					REM Generate an SVGFile using the _CurrentTSize and _CurrentRasterGraphic_FilePath
					SVGGenerator.RunPotraceEXE(Me.SVGGenerationParameters.PotraceEXE, _PotraceCLAs, SVGGenerator.PotraceEXE_AllowedLifetimeMS)

					REM Make sure than the SVGFile we now *think* exists, actually exists
					If Not IO.File.Exists(_FinalSVGFile_OutputPath) Then Throw New IO.FileNotFoundException("After apparently successfully running Potrace, the Output SVGFile did not exist at " & _FinalSVGFile_OutputPath.EncapsulateIn(""""))

					REM Now check that the File Generated is not Empty
					Dim _SVGFileGenerated As IO.FileInfo = (New IO.FileInfo(_FinalSVGFile_OutputPath))
					If SVGGenerator.SVGFileContainsNoBeziers(_SVGFileGenerated.FullName) Then Throw New GeneratedEmptySVGException("An Empty SVG was Generated from the RasterGraphic " & _RasterGraphicForPotrace.FullName.EncapsulateIn(""""), _SVGFileGenerated.FullName)

					Return New SVGGenerationResultData() With {
					 .InputRasterGraphicCropCount = 0,
					 .GeneratedSVGFileSizes = {_SVGFileGenerated.SizeInIntegralKB()}.ToList(),
					 .FilesToBeDeleted = If(_BMPHadToBeGenerated, {_RasterGraphicForPotrace}, {}).ToList(),
					 .LastSVGGenerated = _SVGFileGenerated,
					 .UsedTSizes = {SVGGenerator.DefaultPotraceTSize}.ToList(),
					 .TerminalRG_DimensionsPercentageOfIRG = 100
					}

				Catch _SVGEmptyExcp As GeneratedEmptySVGException : Throw
				Catch _Ex As Exception : Throw (New GraphPicturesConversionException("[ModerationMode = DontModerateSVGFileSize] Upon attempting to generate an SVG from a RasterGraphic: {" & _Ex.Message & "}"c, _Ex))
				Finally	REM Delete the Tempoary BMP used if one was generated
					Try
						If _BMPHadToBeGenerated Then _RasterGraphicForPotrace.Delete()
					Catch _FilesDelEx As Exception
						Throw New IO.IOException("The Tempoary BMP created probably could not be deleted after the generation of an SVG. The Exception was: " & _FilesDelEx.Message, _FilesDelEx)
					End Try
				End Try

			End Function

			''' <summary>
			''' Generates an SVG for the InputRasterGraphic, reducing or increacing the Bitmap Dimensions of the IRG over a Maximun Number of attempts, in the hope that Potrace will then pick up on less (or mrore) detail
			''' </summary>
			''' <returns></returns>
			Private Function GenerateSVG_AdjustInputQuality_(ByVal _FinalSVGFile_OutputPath$, ByVal _TargetSVGFileSizeKB As UInt16, Optional ByVal _PotraceTSize As UInt16 = SVGGenerator.DefaultPotraceTSize) As SVGGenerationResultData

				REM Generate a BMP for the IRG if it wasn't one already
				REM Set the PotraceRG to either the BMP or the IRG
				REM Over a Max of [MaxAttempts] Attempts:
				REM		Generate an SVG using the _CurrentPotraceRG
				REM		Look at it's Size:
				REM			Within +|- 10% of _TargetSVGFileSizeKB:
				REM				Exit For
				REM			Too Large OrElse Too Small:
				REM				Generate new RG, decreacing OrElse increacing the Dimensions, relative to the Dimensions of the _CurrentRG_ForPotrace
				REM				If new Dimensions would be out of allowed _MinDimension to _MaxDimension Range, then set _IsLastAttempt to True
				REM				Add() the (old) RG to the ListOfFilesToBeDeletedAtEnd
				REM				Continue For (to avoid exiting due _IsLastAttempt having just been set to True)
				REM		If _IsLastAttempt Then Exit For
				REM Next Attempt
				REM	Check that the Terminal SVG isn't Empty, Throwing a GeneratedEmptySVGException if it is
				REM	Delete all Temp BMPs, and Return an SVGGenerationResultData Object with all the data about the Attempts made

				Const _Max_RGQualityAdjustmentAttempts As [Byte] = 6US				'After this many attempts, the last SVGGenerated is returned anyway
				Const _Max_ResizedRGDimension As UInt16 = 4000						'The RG should never be resized to over this Dimension (neither the WIDTH or HEIGHT)
				Const _Min_ResizedRGDimension As UInt16 = 10						'The RG should never be resized to underthis Dimension (neither the WIDTH or HEIGHT)

				Dim _GeneratedSVGFileSizes As New List(Of UInt64)()					'Keep track of the SVGFileSizes for Debugging
				Dim _CurrentRG_ForPotrace As IO.FileInfo = Me.InputRasterGraphic	'This points to the current RasterGraphic being used. It changes if a BMP is created because the IRG wasn't one.
				Dim _LastSVGFileGenerated As IO.FileInfo = Nothing					'Each time an SVGFile is generated, this is set to represent it. This allows it's FileSize to be resolved.
				Dim _TempFiles_ToDeleteAtEnd As New List(Of IO.FileInfo)()			'Any tempoarary Files which need to be deleted once we have the SVG are added to this list, and are deleted at the end.
				Dim _IsLastAttempt As Boolean = False								'Used to make sure no more attempts are made after a Resized RG is generated which has dimensions equal to either the Min or Max allowed [ResizedRGDimension]s

				Try
					REM Make sure that we are dealing with a .BMP file
					If Not (Me.InputRasterGraphic.Extension.ToUpper() = ".BMP") Then 'Generate a BMP to use instead of the IRG...
						MsgDebug("The IRG was not a .BMP; Generating a tempoary BMP for it...")
						'Set the Path of the ImageFile potrace will use, to this a newly-generated BMP
						_CurrentRG_ForPotrace = SVGGenerator.GenerateBMPInFolder(Me.InputRasterGraphic, Me.SVGGenerationParameters.BitmapConversionFolder)
						'We want to delete this BMP File at the end:
						_TempFiles_ToDeleteAtEnd.Add(_CurrentRG_ForPotrace)
					Else 'If we're here, then the InputRasterGraphic was already a .BMP; it's fine as it is.
					End If

					REM The _CurrentRasterGraphic_FilePath Now points to a .BMP File, ready for Potrace.

					'The following variable is used in the ForLoop, but is declared at this scope, so that it can be read for Returning the Number of attempts it took to produce the SVG:
					Dim _Current_RGQualityAdjustmentAttempt As [Byte] = 1US

					For _Current_RGQualityAdjustmentAttempt = 1US To _Max_RGQualityAdjustmentAttempts Step +1

						Dim _PotraceCLAs$ = String.Format("--output ""{0}"" --svg --progress --turdsize {1} ""{2}""", _FinalSVGFile_OutputPath, _PotraceTSize.ToString(), _CurrentRG_ForPotrace.FullName)
						REM Generate an SVGFile using the _CurrentRG_ForPotrace
						SVGGenerator.RunPotraceEXE(Me.SVGGenerationParameters.PotraceEXE, _PotraceCLAs, SVGGenerator.PotraceEXE_AllowedLifetimeMS)
						REM Make sure that the SVGFile we now *think* exists, actually exists:
						If Not IO.File.Exists(_FinalSVGFile_OutputPath) Then Throw New IO.FileNotFoundException("After apparently successfully running Potrace, the Output SVGFile did not exist at " & _FinalSVGFile_OutputPath.EncapsulateIn(""""))

						_LastSVGFileGenerated = (New IO.FileInfo(_FinalSVGFile_OutputPath))
						_GeneratedSVGFileSizes.Add(_LastSVGFileGenerated.SizeInIntegralKB())

						If CLng(_LastSVGFileGenerated.SizeInIntegralKB()).IsBetweenInclusive(CLng(_TargetSVGFileSizeKB * 0.8), CLng(_TargetSVGFileSizeKB * 1.2)) Then
							'The FileSize of the Last SVGGenerated is acceptable; Exit For, and proceed to check weather it's empty
							Exit For
						ElseIf (_LastSVGFileGenerated.SizeInIntegralKB() < _TargetSVGFileSizeKB) OrElse (_LastSVGFileGenerated.SizeInIntegralKB() > _TargetSVGFileSizeKB) Then

							'If we said last time, that this time should be the last attempt (which we've just made because we've run the PotraceEXE before having gotten to this If Statment)
							'...Then we need to Exit For Now...
							If _IsLastAttempt Then Exit For

							Dim _BitmapOf_CurrentRG As New Drawing.Bitmap(_CurrentRG_ForPotrace.FullName)

							'The If() assures we don't overflow an Int64
							Dim _NewWidth As Int64 = CLng(If((_BitmapOf_CurrentRG.Width * (_TargetSVGFileSizeKB / (_LastSVGFileGenerated.SizeInIntegralKB()))) > Int64.MaxValue, _Max_ResizedRGDimension + 1, (_BitmapOf_CurrentRG.Width * (_TargetSVGFileSizeKB / (_LastSVGFileGenerated.SizeInIntegralKB())))))
							Dim _NewHeight As Int64 = CLng(If((_BitmapOf_CurrentRG.Height * (_TargetSVGFileSizeKB / (_LastSVGFileGenerated.SizeInIntegralKB()))) > Int64.MaxValue, _Max_ResizedRGDimension + 1, (_BitmapOf_CurrentRG.Height * (_TargetSVGFileSizeKB / (_LastSVGFileGenerated.SizeInIntegralKB())))))

							'Ensure the _NewWidth and _NewHeight are within the allowed range for RG Dimensions:
							If _NewWidth > _Max_ResizedRGDimension Then
								_NewWidth = _Max_ResizedRGDimension : _IsLastAttempt = True
							ElseIf _NewWidth < _Min_ResizedRGDimension Then
								_NewWidth = _Min_ResizedRGDimension : _IsLastAttempt = True
							End If

							If _NewHeight > _Max_ResizedRGDimension Then
								_NewHeight = _Max_ResizedRGDimension : _IsLastAttempt = True
							ElseIf _NewHeight < _Min_ResizedRGDimension Then
								_NewHeight = _Min_ResizedRGDimension : _IsLastAttempt = True
							End If

							MsgDebug("_NewWidth: " & _NewWidth.ToString() & vbCrLf & "_NewHeight: " & _NewHeight.ToString() & vbCrLf & "_IsLastAttempt: " & _IsLastAttempt.ToString())

							Dim _BitmapOf_IRG As New Drawing.Bitmap(Me.InputRasterGraphic.FullName)
							Dim _BitmapOf_IRG_ToResize As New Drawing.Bitmap(Me.InputRasterGraphic.FullName)

							Dim _ResizedRG As Drawing.Bitmap _
							 = _BitmapOf_IRG_ToResize.ResizeTo(_TargetWidth:=CInt(_NewWidth), _TargetHeight:=CInt(_NewHeight))

							MsgDebug("Percentage ResizedRG is of IRG: " & CInt((_ResizedRG.Width / _BitmapOf_IRG.Width) * 100I).ToString())
							Dim _FileNameForNewRG$ = IO.Path.Combine(Me.SVGGenerationParameters.BitmapConversionFolder.FullName, FileResources.FindAvaliableFileNameInFolder(Me.SVGGenerationParameters.BitmapConversionFolder.FullName.MakeValidFolderPath(), "R"c & CInt((_ResizedRG.Width / _BitmapOf_IRG.Width) * 100I).ToString() & "_"c & _CurrentRG_ForPotrace.Name))

							'Now save that BMP we've just produced to Disk:
							_ResizedRG.Save(
							 filename:=_FileNameForNewRG,
							 format:=Drawing.Imaging.ImageFormat.Bmp
							)

							_ResizedRG.Dispose()
							_BitmapOf_CurrentRG.Dispose()
							_BitmapOf_IRG.Dispose()
							_BitmapOf_IRG_ToResize.Dispose()

							'And now Update the _CurrentRGForPotrace to Point to this new RG:
							_CurrentRG_ForPotrace = New IO.FileInfo(_FileNameForNewRG)

							'Now that we have a new RG, delete the old one:
							_TempFiles_ToDeleteAtEnd.Add(New IO.FileInfo(_CurrentRG_ForPotrace.FullName))

						Else : Throw (New GraphPicturesException("The SVGFileSize was neither acceptable, too small, or too large. _Current_RGQualityAdjustmentAttempt == " & _Current_RGQualityAdjustmentAttempt.ToString()))
						End If

					Next

					If SVGFileContainsNoBeziers(_LastSVGFileGenerated.FullName) Then _
					 Throw New GeneratedEmptySVGException("The RasterGraphic being used was: {" & _CurrentRG_ForPotrace.FullName & "}. The _Current_RGQualityAdjustmentAttempt was: " & _Current_RGQualityAdjustmentAttempt.ToString(), _LastSVGFileGenerated.FullName)

					MsgDebug("About to Return From DimensionAdjustment SVGGeneraiton and perform Finally statment. Generated SVG's Sizes: {" & String.Join(", ", _GeneratedSVGFileSizes.ToArray()) & "}"c & vbCrLf & "Files to Delete: {" & (_TempFiles_ToDeleteAtEnd.Aggregate(Of String, String)(seed:=String.Empty, func:=Function(_TotalString$, _File As IO.FileInfo) _TotalString & vbCrLf & _File.FullName, resultSelector:=Function(_String$) _String) & "}"c))

					REM If we're here, it must either be because either [the SVGFile had an acceptable size before MaxAttempts expired] or [MaxAttempts expired before an SVGFile of desired size was generated; return the last one anyway...]
					Return (New SVGGenerationResultData() With {
					  .InputRasterGraphicCropCount = 0,
					  .GeneratedSVGFileSizes = _GeneratedSVGFileSizes,
					  .FilesToBeDeleted = _TempFiles_ToDeleteAtEnd,
					  .LastSVGGenerated = _LastSVGFileGenerated,
					  .UsedTSizes = {_PotraceTSize}.ToList(),
					 .TerminalRG_DimensionsPercentageOfIRG = CUShort((
					 (Function() As Integer
						  Dim _BitmapOf_CurrentRG As New Drawing.Bitmap(_CurrentRG_ForPotrace.FullName)
						  Dim _Width_ToReturn% = _BitmapOf_CurrentRG.Width
						  _BitmapOf_CurrentRG.Dispose()
						  Return _Width_ToReturn
					  End Function).Invoke() _
					 / (New Drawing.Bitmap(Me.InputRasterGraphic.FullName)).Width) * 100I)
					 })

				Catch _SVGEmptyExcp As GeneratedEmptySVGException : Throw
				Catch _Ex As Exception : Throw (New GraphPicturesConversionException("[ModerationMode = AdjustInputQuality] Upon attempting to generate an SVG from a RasterGraphic: {" & _Ex.Message & "}"c, _Ex))
				Finally	REM Delete any Tempoary Files Accumulated during SVGGeneration attempts...
					Try
						Dim _FilesWhichCouldNotBeDeleted As New List(Of String)()

						For Each _File As IO.FileInfo In _TempFiles_ToDeleteAtEnd
							Try
								REM If the File doesn't exist, then this will NOT Throw an Exception(); it will just move on:
								_File.Delete()
							Catch _Ex As Exception
								_FilesWhichCouldNotBeDeleted.Add(vbCrLf & "{ File = """ & _File.FullName & """; Reason = """ & _Ex.Message & """ }" & vbCrLf)
							End Try
						Next

						If Not (_FilesWhichCouldNotBeDeleted.Count = 0) Then Throw (New IO.IOException("The Following Tempoary Files could not be deleted at the end of an SVGGeneration: {" & String.Join(", ", _FilesWhichCouldNotBeDeleted.ToArray()) & "}"c))

					Catch _FilesDelEx As Exception
						Throw New IO.IOException("One or more of the Tempoary Files probably could not be deleted during the generation of an SVG. The Exception was: " & _FilesDelEx.Message, _FilesDelEx)
					End Try
				End Try

			End Function

			''' <summary>
			''' Generates an SVG for the InputRasterGraphic, adjusting the Potrace TSize if it's not within 10% of the _TargetSVGFileSizeKB
			''' </summary>
			''' <returns></returns>
			Private Function GenerateSVG_AdjustTSize_(ByVal _FinalSVGFile_OutputPath$, ByVal _TargetSVGFileSizeKB As UInt16) As SVGGenerationResultData

				REM Generate a BMP for the IRG if it wasn't one already
				REM Over a Max of [MaxAttempts] Attempts:
				REM		Generate an SVG using the _CurrentTSize
				REM		Check that the SVG isn't Empty, Throwing a GeneratedEmptySVGException if it is
				REM		Look at the generated SVG's FileSize. If it's within 10% of the _TargetSVGFileSizeKB then:
				REM			Delete the single Temp BMP if one was created, and Return
				REM		Otherwise, the SVG is too small or too large, but not empty, so:
				REM			Use the Equation to get the new TSize
				REM			If This new TSize is (Less Than _MinTSize) OrElse (Greater Than _MaxTSize) Then Set IsLastAttempt to True, and [Continue] the ForLoop
				REM		If _IsLastAttempt Then [Exit For]
				REM	Next Attempt
				REM Return an SVGGenerationResultData Object with all the data about the Attempts made


				REM Over a maximun of:
				Const _MaxNumberOfFileSizeRegulationAttempts% = 10
				REM ...Attempts to get an SVG of size _TargetSVGFileSizeKB, Render a Potrace .SVG with dynamically-assigned TSizes

				REM Allow the file through, as long as it is within:
				Const _FileSizeTolerancePercentage As UInt16 = 10%
				REM ...Of the _TargetSVGFileSize

				Const _MinTSize As UInt16 = 0						'If the TSize is set to less than this Value, then only one more attempt is made
				Const _MaxTSize As UInt16 = 3000					'If the TSize is set to more than this Value, then only one more attempt is made
				Const _InitialTSize As UInt16 = 2					'What the TSize starts at.

				Dim _CurrentFileSizeRegulationAttempt As Byte = 0	'Incremented by the For Loop
				Dim _LastSVGFileGenerated As IO.FileInfo = Nothing	'A Pointer to the Last SVGFile Generated
				Dim _PercentageOfTargetFileSize As UInt64			'I.e. 100% == The GeneratedSVGFileSize was perfect; 50% == It was half of the desired size
				Dim _CurrentTSize As UInt16 = _InitialTSize			'Adjusted every time an SVG is Generated which is too small or too large.
				Dim _RasterGraphicForPotrace As IO.FileInfo = Me.InputRasterGraphic
				Dim _BMPHadToBeGenerated As Boolean = False			'This is used INSTEAD of just checking weather the Input's Extention was ".BMP", because we need to know weather or not to delete a Temp BMP in the Finally Statment, and we wouldn't nesseceriarly have entered the Finally Statment after having Generated the Temp BMP, so the _RasterGraphicForPotrace would actually still be pointing to the IRG, which we never want to Delete
				Dim _IsLastSVGGenerationAttempt As Boolean = False	'Set to True if the TSize gets set to 0, and is checked at the end of an attempt (== A ForLoop Iteration)

				'Keep track of the SVGFileSizes and [TSizes used] for Debugging
				Dim _GeneratedSVGFileSizes As New List(Of UInt64)()
				Dim _UsedTSizes As New List(Of UInt16)()

				REM We need a way of knowing weather or not there have been any non-empty SVGGeneration attempts so far, so we log weather each attempt produced an Empty SVG
				Dim _EmptySVGsLog As New List(Of Boolean)()	'[True] == [The SVG was Empty]

				Try

					REM Make sure that we are dealing with a .BMP file
					If Not (Me.InputRasterGraphic.Extension.ToUpper() = ".BMP") Then 'Generate a BMP to use instead of the actual InputFile...

						MsgDebug("The IRG was not a .BMP; Generating a tempoary BMP for it...")

						'Set the Path of the ImageFile potrace will use, to this a newly-generated BMP
						_RasterGraphicForPotrace = SVGGenerator.GenerateBMPInFolder(Me.InputRasterGraphic, Me.SVGGenerationParameters.BitmapConversionFolder)

						'We want to delete this BMP File at the end:
						_BMPHadToBeGenerated = True

					Else
						'If we're here, then the InputRasterGraphic was already a .BMP; it's fine as it is.
					End If

					REM The _RGForPotrace Now points to a .BMP File, ready for Potrace.
					REM For this ModerationMode, the _RGForPotrace will never need to be changed again.

					REM Generate an SVG using the _CurrentTSize, and keep doing this until [MaxAttempts Hit] or [Sought FileSize reached]
					For _CurrentFileSizeRegulationAttempt = 0 To (_MaxNumberOfFileSizeRegulationAttempts - 1) Step +1

						REM Generate an SVGFile using the _CurrentTSize and _CurrentRasterGraphic_FilePath
						Dim _PotraceCLAs$ = String.Format("--output ""{0}"" --svg --progress --turdsize {1} ""{2}""", _FinalSVGFile_OutputPath, _CurrentTSize.ToString(), _RasterGraphicForPotrace.FullName)
						SVGGenerator.RunPotraceEXE(Me.SVGGenerationParameters.PotraceEXE, _PotraceCLAs, SVGGenerator.PotraceEXE_AllowedLifetimeMS)

						REM Make sure than the SVGFile we now *think* exists, actually exists
						If Not IO.File.Exists(_FinalSVGFile_OutputPath) Then Throw New IO.FileNotFoundException("After apparently successfully running Potrace, the Output SVGFile did not exist at " & _FinalSVGFile_OutputPath.EncapsulateIn(""""))

						_LastSVGFileGenerated = New IO.FileInfo(_FinalSVGFile_OutputPath)
						_GeneratedSVGFileSizes.Add(_LastSVGFileGenerated.SizeInIntegralKB())
						_UsedTSizes.Add(_CurrentTSize)

						If SVGGenerator.SVGFileContainsNoBeziers(_LastSVGFileGenerated.FullName) Then

							MsgDebug("The Generated SVG was Empty - Handling this eventuality...")

							_EmptySVGsLog.Add(True)	'It's TRUE that the SVG was Empty

							REM This is either because:
							REM		We've only generated Empty SVG's so far (or this is the 1st attempt),
							REM			So we need to Decreace the TSize (From 2 to 1, or [from 1 to 0 setting _IsLastAttempt to True])
							REM		Or, we have previously generated at least one SVG which wasn't empty (but was not within the ideal FileSize range, so continued into this iteration).
							REM			Therefore we need to look at what the TSize used to create the last SVG was, and set the _CurrentTsize to that again, then set _IsLastAttempt to True, and then Continue For, in order to generate our final SVG

							If (_CurrentFileSizeRegulationAttempt = 0) OrElse (_EmptySVGsLog.All(Function(_WasEmpty As Boolean) _WasEmpty)) Then
								MsgDebug("Only Empty SVG's have been generated so far (or this is the first attempt)")
								Select Case _CurrentTSize
									Case 0 : Exit For 'This occours because we looped back round from 2 to 1, and then the 1 sets it to 0. We could use the _IsLastAttempt to catch this, but that is only checked for after we know the SVG isn't empty
									Case 1 : _CurrentTSize = 0 : Continue For
									Case 2 To _InitialTSize : _CurrentTSize = 1 : Continue For
									Case Else : Throw New GraphPicturesException("Only Empty SVGs have been generated so far (or this was the first attempt) and yet the _CurrentTSize wasn't 2 or 1 or 0. It was: " & _CurrentTSize.ToString() & ". The Current Iteration was: " & _CurrentFileSizeRegulationAttempt.ToString() & ". Note that the first Iteration is Iteration 0, not Iteration 1.")
								End Select
							ElseIf _EmptySVGsLog.Any(Function(_WasEmpty As Boolean) Not _WasEmpty) Then	'There's at least one which wasn't empty; it must have been the Last one, otherwise, we would have fallen into this case before.
								MsgDebug("Previously, a non-empty SVG was Generated. Setting the TSize to that one's again and generating that as the Terminal SVG...")
								If String.Join("¦", _EmptySVGsLog.Select(Of String)(Function(_WasEmpty As Boolean) _WasEmpty.ToString())).Contains("False¦True¦True") Then Throw New GraphPicturesException("After attempting to reproduce the 2nd to last SVG (because the very last one was empty), it was found to be empty. There was probably a problem with it's creation. Replacing the Throwing of this Exception with an [Exit For] may fix this Problem.")

								_CurrentTSize = _UsedTSizes.Item(_UsedTSizes.Count - 2)
								_IsLastSVGGenerationAttempt = True
								: Continue For

							Else : Throw New GraphPicturesException("The SVGFile Generated contained no Beziers for an Unhandled Reason")
							End If

						Else 'The SVGFile DOES contain some Beziers
							_EmptySVGsLog.Add(False) 'It's FALSE that the SVG was Empty
						End If

						REM Now that we know the SVG isn't Empty, let's find out weather it's of an acceptable size...

						If _IsLastSVGGenerationAttempt Then Exit For

						REM Calcuate the Percentage of the Target, that the FileSize is currently (i.e. 100% == [FileSize is perfect]; 50% == [FileSize is half of what it should be])
						_PercentageOfTargetFileSize = CULng(((_LastSVGFileGenerated.Length \ 1000) \ _TargetSVGFileSizeKB) * 100)

						MsgDebug("Percentage of Target FileSize: " & _PercentageOfTargetFileSize.ToString())

						REM Exit the ForLoop if the SVG we generated actually was of the correct size (...which would be very unlikely knowing our luck...)
						If CLng(_PercentageOfTargetFileSize).IsBetween(100 - _FileSizeTolerancePercentage, 100 + _FileSizeTolerancePercentage) Then Exit For

						REM If we've gotten here, the range wasn't met (so we didn't return), so change the _TSize
						Try
							'FileSize Too Small	->	Decrease TSize
							'FileSize Too Large	->	Increase TSize
							Dim _NewTSize As System.Int64 = Convert.ToInt64(_CurrentTSize * (_PercentageOfTargetFileSize / 100))
							'E.g.						2	    *				50%						== 1

							REM If This new TSize is (Less Than _MinTSize) OrElse (Greater Than _MaxTSize) Then Set IsLastAttempt to True, and [Continue] the ForLoop
							If _NewTSize <= _MinTSize Then
								_CurrentTSize = _MinTSize : _IsLastSVGGenerationAttempt = True : Continue For
							ElseIf _NewTSize >= _MaxTSize Then
								_CurrentTSize = _MaxTSize : _IsLastSVGGenerationAttempt = True : Continue For
							Else 'The TSize is acceptable
								_CurrentTSize = Convert.ToUInt16(_NewTSize)
							End If

						Catch _Ex As Exception : Throw New GraphPicturesException("Upon assigning the new TSize: " & _Ex.Message)
						End Try

					Next

					REM Having exited that ForLoop, it's either because:
					REM		_MaxAttempts was reached, BEFORE we generated an SVG of the desired size:		Return the Last SVG we generated anyway
					REM		Or, we generated an SVG of the desired FileSize within _MaxAttempts Iterations:	Return the Last SVG we generated

					REM Check that we're definatly falling into one of those two cases mentioned above:
					If Not ((_CurrentFileSizeRegulationAttempt < _MaxNumberOfFileSizeRegulationAttempts) OrElse ((_CurrentFileSizeRegulationAttempt = _MaxNumberOfFileSizeRegulationAttempts) AndAlso (Not CLng(_PercentageOfTargetFileSize).IsBetween(100 - _FileSizeTolerancePercentage, 100 + _FileSizeTolerancePercentage)))) Then Throw New GraphPicturesConversionException("[_CurrentFileSizeRegulationAttempt=" & _CurrentFileSizeRegulationAttempt.ToString() & "] The ForLoop for SVGGeneration Attempts was exited for an Unknown Reason.")

					'DoubleCheck that the SVGFile does actually exist:
					If Not _LastSVGFileGenerated.Exists Then Throw New IO.FileNotFoundException("[_CurrentFileSizeRegulationAttempt=" & _CurrentFileSizeRegulationAttempt.ToString() & "] After Exiting the ForLoop for SVGGeneration Attempts, the SVGFile was found to not exist @ " & _LastSVGFileGenerated.FullName, _LastSVGFileGenerated.FullName)

					Return New SVGGenerationResultData() With {
					 .InputRasterGraphicCropCount = 0,
					 .GeneratedSVGFileSizes = _GeneratedSVGFileSizes,
					 .FilesToBeDeleted = If(_BMPHadToBeGenerated, {_RasterGraphicForPotrace}, {}).ToList(),
					 .LastSVGGenerated = _LastSVGFileGenerated,
					 .UsedTSizes = _UsedTSizes,
					 .TerminalRG_DimensionsPercentageOfIRG = 100
					}

				Catch _SVGEmptyExcp As GeneratedEmptySVGException : Throw
				Catch _Ex As Exception : Throw (New GraphPicturesConversionException("[ModerationMode = AdjustTSize] (_CurrentFileSizeRegulationAttempt was """ & _CurrentFileSizeRegulationAttempt.ToString() & """) Upon attempting to generate an SVG from a RasterGraphic: {" & _Ex.Message & "}"c, _Ex))
				Finally	REM Delete the Tempoary BMP used if one was generated
					Try
						If _BMPHadToBeGenerated Then _RasterGraphicForPotrace.Delete()
					Catch _FilesDelEx As Exception
						Throw New IO.IOException("The Tempoary BMP created probably could not be deleted after the generation of an SVG. The Exception was: " & _FilesDelEx.Message, _FilesDelEx)
					End Try
				End Try

			End Function

			''' <summary>
			''' Generates an SVG for the InputRasterGraphic, cropping the input RasterGraphic if it produces too many beziers in the output SVG
			''' </summary>
			''' <param name="_IdealMaximumSVGFileSizeKB">SVGs above this size will actually make it through if MaxAttempts to crop the image is reached, before an SVG below this size is generated...</param>
			''' <returns>Data including The Number of times the Input Image had to be cropped, before an SVG of acceptable size was produced.</returns>
			Private Function GenerateSVG_CropInputEdges_(ByVal _FinalSVGFile_OutputPath$, ByVal _IdealMaximumSVGFileSizeKB As UInt16) As SVGGenerationResultData

				REM Generate a BMP for the IRG if it wasn't one already
				REM Generate an SVG
				REM See if it's FileSize is above the _MaximumSVGFileSizeKB. If it is:
				REM		Generate a smaller version of the RasterGraphic and try again, until _MaxRasterGraphicPixelCountReductionAttempts is reached
				REM If it isn't:
				REM		Check to see that the Generated SVG contains some Beziers. If it does:
				REM			Log() and Return
				REM		If it dosen't:
				REM			Throw a GeneratedEmptySVGException

				Const _Max_RasterGraphicPixelCountReductionAttempts As [Byte] = 8US		'I.e. Proportion of Origional Image used for each iteration becomes: 1, .8, .64, .512, .4096, .32768, ...
				Const _RasterGraphic_PixelCountReductionProportion As [Decimal] = 0.8@	'I.e. Keep the centeral 80% of the image if it produced too many Beziers...

				Dim _GeneratedSVGFileSizes As New List(Of UInt64)()						'Keep track of the SVGFileSizes for Debugging
				Dim _CurrentRasterGraphic_FilePath$ = ""								'This points to the current RasterGraphic being used. It changes every time [a RasterGraphic produces too many Beziers and so 20% (Actually 36%) of it's pixels are removed]. When this occours, this Variable is updated to point to the new, samller, RasterGraphic.
				Dim _LastSVGFileGenerated As IO.FileInfo = Nothing						'Each time an SVGFile is generated, this is set to represent it. This allows it's FileSize to be resolved.
				Dim _TempFiles_ToDeleteAtEnd As New List(Of IO.FileInfo)()				'Any tempoarary Files which need to be deleted once we have the SVG are added to this list, and are deleted at the end.

				Try

					REM Make sure that we are dealing with a .BMP file
					If Not (Me.InputRasterGraphic.Extension.ToUpper() = ".BMP") Then	'Generate a BMP to use instead of the actual InputFile...
						Try

							MsgDebug("The IRG was not a .BMP; Generating a tempoary BMP for it...")

							'Set the Path of the ImageFile potrace will use, to this a newly-generated BMP
							_CurrentRasterGraphic_FilePath = SVGGenerator.GenerateBMPInFolder(Me.InputRasterGraphic, Me.SVGGenerationParameters.BitmapConversionFolder).FullName

							'We want to delete this BMP File at the end:
							_TempFiles_ToDeleteAtEnd.Add(New IO.FileInfo(_CurrentRasterGraphic_FilePath))

						Catch _BMPConvExcp As Exception
							Throw New IO.IOException("Upon attempting to save the Input RasterGraphic as a BMP: " & _BMPConvExcp.Message)
						End Try
					Else
						'If we're here, then the InputRasterGraphic was already a .BMP; it's fine as it is.
						_CurrentRasterGraphic_FilePath = Me.InputRasterGraphic.FullName
					End If

					REM The _CurrentRasterGraphic_FilePath Now points to a .BMP File, ready for Potrace.

					'The following variable is used in the ForLoop, but is declared at this scope, so that it can be read for Returning the Number of attempts it took to produce the SVG:
					Dim _Current_RasterGraphicPixelCountReductionAttempt As [Byte] = 1US

					For _Current_RasterGraphicPixelCountReductionAttempt = 1US To _Max_RasterGraphicPixelCountReductionAttempts Step +1

						Dim _PotraceCLAs$ = String.Format("--output ""{0}"" --svg --progress --turdsize {1} ""{2}""", _FinalSVGFile_OutputPath, SVGGenerator.DefaultPotraceTSize.ToString(), _CurrentRasterGraphic_FilePath)

						REM Generate an SVGFile using the _CurrentRasterGraphic_FilePath
						SVGGenerator.RunPotraceEXE(Me.SVGGenerationParameters.PotraceEXE, _PotraceCLAs, SVGGenerator.PotraceEXE_AllowedLifetimeMS)

						REM Make sure than the SVGFile we now *think* exists, actually exists
						If Not IO.File.Exists(_FinalSVGFile_OutputPath) Then Throw New IO.FileNotFoundException("After apparently successfully running Potrace, the Output SVGFile did not exist at " & _FinalSVGFile_OutputPath.EncapsulateIn(""""))

						REM Now check that the File Generated is Below the maximun allowed Size
						_LastSVGFileGenerated = (New IO.FileInfo(_FinalSVGFile_OutputPath))
						_GeneratedSVGFileSizes.Add(_LastSVGFileGenerated.SizeInIntegralKB())

						If _LastSVGFileGenerated.SizeInIntegralKB() > _IdealMaximumSVGFileSizeKB Then

							REM We need to now generate a smaller version of the RasterGraphic and try again...

							Dim _LastRasterGraphicUsed As New IO.FileInfo(_CurrentRasterGraphic_FilePath)

							Try

								Dim _ZoomedInRasterGraphic As New Drawing.Bitmap(_LastRasterGraphicUsed.FullName)

								'Redefine the _CurrentRasterGraphic_FilePath to point to a new, smaller version of the RasterGraphic
								_CurrentRasterGraphic_FilePath = IO.Path.Combine(Me.SVGGenerationParameters.BitmapConversionFolder.FullName, Library.FileResources.FindAvaliableFileNameInFolder(Me.SVGGenerationParameters.BitmapConversionFolder.FullName.MakeValidFolderPath(), "Crop" & _Current_RasterGraphicPixelCountReductionAttempt & "_" & If(_Current_RasterGraphicPixelCountReductionAttempt = 1, _LastRasterGraphicUsed.Name, _LastRasterGraphicUsed.Name.Substring(6))))
								_ZoomedInRasterGraphic.GetZoomedInCopy(_RasterGraphic_PixelCountReductionProportion).Save(_CurrentRasterGraphic_FilePath, Drawing.Imaging.ImageFormat.Bmp)

								_ZoomedInRasterGraphic.Dispose()

							Catch _Ex As Exception
								Throw (New GraphPicturesConversionException("Upon attempting to Save a smaller version of the RasterGraphic: {" & _Ex.Message & "}. _Current_RasterGraphicPixelCountReductionAttempt = [" & _Current_RasterGraphicPixelCountReductionAttempt.ToString() & "]"c, _Ex))
							End Try

							REM Now that the New smaller RasterGraphic is being used, the old one can be deleted:
							REM ...UNLESS: We generated a .BMP for the origional input, in which case we would be using it only on the first iteration,
							REM ...And we have already added that .BMP to the list of files to delete at the end.
							'
							'Surely I actually mean: UNLESS:
							'	This is the 1st Iteration, in which case, the _LastRGUsed points to the IRG, and:
							'	The Input was already a .BMP, in which case, we don't want to delete it
							If Not ((_Current_RasterGraphicPixelCountReductionAttempt = 1) AndAlso (Me.InputRasterGraphic.Extension.ToUpper() = ".BMP")) Then
								MsgDebug("Adding Temp File To Delete @ Position 2: " & _LastRasterGraphicUsed.FullName)
								_TempFiles_ToDeleteAtEnd.Add(_LastRasterGraphicUsed)
							End If
							'If					This isn't the 1st CropAttempt				AND						We had to generate a BMP @ the Start	 Then			Delete the Last RG used, because we've just generated a new cropped one, and are about to try again...

						Else REM The SVGFile is of an acceptable size, but is it Empty...?
							If SVGFileContainsNoBeziers(_LastSVGFileGenerated.FullName) Then
								Throw New GeneratedEmptySVGException("The RasterGraphic being used was: " & _CurrentRasterGraphic_FilePath & ".The _Current_RasterGraphicPixelCountReductionAttempt was: " & _Current_RasterGraphicPixelCountReductionAttempt.ToString(), _LastSVGFileGenerated.FullName)
							Else REM The Generated SVG isn't empty, and is of an acceptable size...
								Exit For
							End If
						End If

					Next

					REM If we've just left that loop because we used a cropped image, then the last Cropped BMP would not have been added to the list of them to delete:
					If Not (_Current_RasterGraphicPixelCountReductionAttempt = 1) Then _TempFiles_ToDeleteAtEnd.Add(New IO.FileInfo(_CurrentRasterGraphic_FilePath))

					MsgDebug("About to Return From Cropping SVGGeneraiton and perform Finally statment. Generated SVG's Sizes: {" & String.Join(", ", _GeneratedSVGFileSizes.ToArray()) & "}"c & vbCrLf & "Files to Delete: {" & (_TempFiles_ToDeleteAtEnd.Aggregate(Of String, String)(seed:=String.Empty, func:=Function(_TotalString$, _File As IO.FileInfo) _TotalString & vbCrLf & _File.FullName, resultSelector:=Function(_String$) _String) & "}"c))

					REM If we're here, it must either be because [we hit the [Exit For], because the SVGFile produced was below the limit, AND the SVGFile wasn't empty], OR because [we reduced the size of the File the max. allowed number of times, and the SVGFile was still too large...]
					REM Therefore it's okay to return the Number of times the InputImage had to be cropped in order to produce an acceptably-sized SVG
					Return (New SVGGenerationResultData() With {
					  .InputRasterGraphicCropCount = CByte(_Current_RasterGraphicPixelCountReductionAttempt - 1),
					  .GeneratedSVGFileSizes = _GeneratedSVGFileSizes,
					  .FilesToBeDeleted = _TempFiles_ToDeleteAtEnd,
					  .LastSVGGenerated = New IO.FileInfo(_FinalSVGFile_OutputPath),
					  .UsedTSizes = {SVGGenerator.DefaultPotraceTSize}.ToList(),
					 .TerminalRG_DimensionsPercentageOfIRG = 100
					 })

				Catch _SVGEmptyExcp As GeneratedEmptySVGException : Throw
				Catch _Ex As Exception : Throw (New GraphPicturesConversionException("[ModerationMode = CropInputEdges] Upon attempting to generate an SVG from a RasterGraphic: {" & _Ex.Message & "}"c, _Ex))
				Finally	REM Delete any Tempoary Files Accumulated during SVGGeneration attempts...
					Try
						Dim _FilesWhichCouldNotBeDeleted As New List(Of String)()

						For Each _File As IO.FileInfo In _TempFiles_ToDeleteAtEnd
							Try
								REM If the File doesn't exist, then this will NOT Throw an Exception(); it will just move on:
								_File.Delete()
							Catch _Ex As Exception
								_FilesWhichCouldNotBeDeleted.Add(vbCrLf & "{ File = """ & _File.FullName & """; Reason = """ & _Ex.Message & """ }" & vbCrLf)
							End Try
						Next

						If Not (_FilesWhichCouldNotBeDeleted.Count = 0) Then Throw (New IO.IOException("The Following Tempoary Files could not be deleted at the end of an SVGGeneration: {" & String.Join(", ", _FilesWhichCouldNotBeDeleted.ToArray()) & "}"c))

					Catch _FilesDelEx As Exception
						Throw New IO.IOException("One or more of the Tempoary Files probably could not be deleted during the generation of an SVG. The Exception was: " & _FilesDelEx.Message, _FilesDelEx)
					End Try
				End Try

			End Function

#End Region

#Region "Utilities"

			''' <summary>
			''' Generates a .BMP version of the _InputRasterGraphic, and saves it under an avaliable FileName within the _BMPOutputFolder, before returning this a Pointer to this File in the form of a FileInfo
			''' </summary>
			Public Shared Function GenerateBMPInFolder(ByVal _InputRasterGraphic As IO.FileInfo, ByVal _BMPOutputFolder As IO.DirectoryInfo) As IO.FileInfo

				'Get [an avaliable FileName in the Bitmap Conversion Folder], under which we can save a .BMP copy of the _InputRasterGraphic
				Dim _BMP_SelectedFilePath$ = IO.Path.Combine(_BMPOutputFolder.FullName, FileResources.FindAvaliableFileNameInFolder(_BMPOutputFolder.FullName & "\"c, "GPConverted_" & _InputRasterGraphic.Name & ".BMP"))

				SVGGenerator.GenerateBMP(_InputRasterGraphic, _BMP_SelectedFilePath)

				Return (New IO.FileInfo(_BMP_SelectedFilePath))

			End Function

			''' <summary>
			''' Generates a .BMP version of the _InputRasterHraphic, saved under the _BMPOutputPath$
			''' </summary>
			Public Shared Sub GenerateBMP(ByVal _InputRasterGraphic As IO.FileInfo, ByVal _BMPFile_OutputPath$)
				Try
					If Not _InputRasterGraphic.Exists Then Throw New IO.FileNotFoundException("The _InputRasterGraphic was not found en-disk.")

					With (New Drawing.Bitmap(_InputRasterGraphic.FullName))
						MsgDebug("About to Generate this BMP: " & _BMPFile_OutputPath$)
						.Save(_BMPFile_OutputPath$, Drawing.Imaging.ImageFormat.Bmp)
						.Dispose()
					End With
				Catch _Ex As Exception
					Throw New GraphPicturesException("Upon attempting to Generate a BMP (" & _BMPFile_OutputPath & ") from [" & _InputRasterGraphic.FullName & "]: " & _Ex.Message)
				End Try
			End Sub

			''' <summary>
			''' Instanciates POTRACE.EXE with the specifier CLA's, from the specified Image Path. If the Process dosen't terminate in the specified No. MS, then it is killed.
			''' </summary>
			Public Shared Sub RunPotraceEXE(ByVal _PotraceEXEFile As IO.FileInfo, ByVal _CLAs$, ByVal _AllowedLifetimeMS As UInt32)

				Try

					With (New Diagnostics.[Process]())

						MsgDebug("About to run Potrace with these CLAs: " & _CLAs)

						.StartInfo = (New Diagnostics.ProcessStartInfo(_PotraceEXEFile.FullName, _CLAs$))
						.Start()

						'Wait for a Maximun of 12 Seconds before Killing the process if it's still running, and thereafter, returning...
						If Not .WaitForExit(CInt(_AllowedLifetimeMS)) Then
							If Not .HasExited Then .Kill()
							.Kill()
						End If

						MsgDebug("Potrace EXE Exit Code: " & .ExitCode.ToString())

						If Not (.ExitCode = 0) Then Throw (New GraphPicturesConversionException("The Potrace Process returned a non-zero ExitCode. The ExitCode was: " & .ExitCode.ToString() & ". The Command-Line Arguments were: " & _CLAs))

					End With

					Return

				Catch [_Ex] As [Exception] When True
					Throw (New GraphPicturesConversionException("The Potrace Process could not be killed, or waited upon to exit, or it returned an Error. The Exception Thrown was: " & _Ex.Message.EncapsulateIn(""""), _Ex))
				End Try

			End Sub

			''' <summary>
			''' Evaluates weather or not an SVG File contains any path data. An Exception is also Thrown if the SVGFile contains no text at all.
			''' </summary>
			Public Shared Function SVGFileContainsNoBeziers(ByVal _SVGFile_Path$) As Boolean
				Try

					'Check if the Specified File actually exists...
					If Not System.IO.File.Exists(_SVGFile_Path$) Then Throw (New GraphPicturesException("The SVG File does not exist. The path was: " & _SVGFile_Path$))

					Dim _SVGFileText$ = My.Computer.FileSystem.ReadAllText(_SVGFile_Path$)

					REM If the File happerens to be empty, then throw an Exception. Sometimes Potrace will create empty SVGFiles if it's input image was invalid in some way.
					If String.IsNullOrEmpty(_SVGFileText) Then Throw New GraphPicturesException("The specified SVGFile contained no text at all: " & _SVGFile_Path)




					'The number of <path>'s in the SVG == {that split} - 1

					'No <path>'s == No Beziers...
					Return (_SVGFileText.Split({"<path d="""}, StringSplitOptions.None).Length = 1)





				Catch _Ex As Exception REM When True
					Throw New GraphPicturesException("Upon attempting to Resolve the Number of Beziers in an SVGFile: {" & _Ex.Message & "}", _Ex)
				End Try

			End Function

#End Region

		End Class

		''' <summary>Puts the Specified Text in the Middle of the Bitmap Returned, using a size-25 Tahoma font on a grey background</summary>
		Public Function GenerateBitmapFromText(ByVal _Text$) As Drawing.Bitmap

			Dim _Bitmap As New Drawing.Bitmap(400, 400)
			Dim _RectangleF As New Drawing.RectangleF(50, 100, 290, 290)
			Dim _Graphics As Drawing.Graphics = Drawing.Graphics.FromImage(_Bitmap)

			_Graphics.SmoothingMode = Drawing.Drawing2D.SmoothingMode.AntiAlias
			_Graphics.InterpolationMode = Drawing.Drawing2D.InterpolationMode.HighQualityBicubic
			_Graphics.PixelOffsetMode = Drawing.Drawing2D.PixelOffsetMode.HighQuality

			_Graphics.DrawString(_Text, New Drawing.Font("Tahoma", 25), Drawing.Brushes.Black, _RectangleF)
			_Graphics.Flush()

			Return _Bitmap

		End Function

		''' <summary>
		''' Saves a Base64 String, beginning with [data:image/png;base64,] to a .PNG file on Disk
		''' </summary>
		''' <param name="_OutputPNGPath">The full path the the Output PNG, E.g. [Z:\Images\Output.PNG]</param>
		''' <remarks>The File is OVERWRITTEN, not APPENDED to, if it already exists</remarks>
		Public Sub SaveBase64PNGToDisk(ByVal _Base64PNG$, ByVal _OutputPNGPath$)

			If Not _Base64PNG.StartsWith("data:image/png;base64,") Then Throw New ArgumentException("The specified _Base64PNG Argument did not start with [data:image/png;base64,].", "_Base64PNG As String (Passed By Value)")

			REM We need to remove the [data:image/png;base64,] from the start of the string, using SubString(22) I.e. Remove the first 22 Chars from the String...
			My.Computer.FileSystem.WriteAllBytes(_OutputPNGPath, Convert.FromBase64String(_Base64PNG.Substring(22)), False)

		End Sub

		''' <summary>
		''' Reads in the Image from Disk, applies the specified Transformaiton, and saves the image back unto disk
		''' </summary>
		Public Sub ApplyTransformationToSavedImage(ByVal _SavedImage_FilePath$, Optional ByVal _TransformationType As Drawing.RotateFlipType = Drawing.RotateFlipType.RotateNoneFlipY)

			Try

				If Not IO.File.Exists(_SavedImage_FilePath) Then Throw New IO.FileNotFoundException("The _SavedImage_FilePath$ does not exist on disk. It was: " & _SavedImage_FilePath, _SavedImage_FilePath)

				'If we're here, then the file does exist, so read it in, flip the copy of it in RAM, and then save that back to disk under the same FileName (replacing the origional file)
				Dim _Bitmap As New Drawing.Bitmap(_SavedImage_FilePath)
				Dim _ResolvedImageFormat As Drawing.Imaging.ImageFormat

				'We can only get the file extention if there is actually a "."c in the File Path
				If Not _SavedImage_FilePath.Contains("."c) Then Throw New Exception("There was no [.] in the FilePath, so there can't be an extention. There needs to be a FileExtention, so that the SaveAs format of the Bitmap can be resolved.")

				Select Case _SavedImage_FilePath.Split("."c).Last()
					Case "JPEG" : _ResolvedImageFormat = Drawing.Imaging.ImageFormat.Jpeg
					Case "JPG" : _ResolvedImageFormat = Drawing.Imaging.ImageFormat.Jpeg
					Case "JFIF" : _ResolvedImageFormat = Drawing.Imaging.ImageFormat.Jpeg
					Case "PNG" : _ResolvedImageFormat = Drawing.Imaging.ImageFormat.Png
					Case "WMF" : _ResolvedImageFormat = Drawing.Imaging.ImageFormat.Wmf
					Case "GIF" : _ResolvedImageFormat = Drawing.Imaging.ImageFormat.Gif
					Case "BMP" : _ResolvedImageFormat = Drawing.Imaging.ImageFormat.Bmp
					Case Else
						Throw New Exception("The File Extention of the Input Was not recognised. It was: " & _SavedImage_FilePath.Split("."c).Last())
				End Select

				With _Bitmap
					.RotateFlip(_TransformationType)
					.Save(_SavedImage_FilePath, _ResolvedImageFormat)
				End With

			Catch _Ex As Exception When True
				Throw New Exception("Wilst attempting to flip a saved Image, it was discovered that... " & _Ex.Message, _Ex)
			End Try

		End Sub

		Public Function GetImageFromClipboard_OrErrorImage() As Drawing.Bitmap

			REM Attempt to: Get the Image from the Clipboard and Return it
			REM This has to occur in an STA Thread

			'Possible alternative method: System.Windows.Forms.Clipboard.GetDataObject().GetFormats()

			Try

				Dim _ExtractedBitmap As Drawing.Bitmap = Nothing

				Dim _STAThread As New Threading.Thread(
				  Sub() _ExtractedBitmap = (New Drawing.Bitmap(My.Computer.Clipboard.GetImage()))
				)

				_STAThread.SetApartmentState(Threading.ApartmentState.STA)
				_STAThread.Start()
				_STAThread.Join()

				If _ExtractedBitmap Is Nothing Then Throw New Exception("The STA Thread didn't populate _ExtractedBitmap")
				Return _ExtractedBitmap

			Catch _Ex As Exception
				Debug.WriteLine("Couldn't extract image from clipboard; " & _Ex.Message)
				Return ImagingResources.GenerateBitmapFromText("Couldn't extract Excel-Rendering from clipboard")
			End Try

		End Function

	End Module

End Namespace